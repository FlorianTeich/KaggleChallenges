version: "3.9"

services:

  loki:
    image: grafana/loki:2.8.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"

  kcu:
    build: .
    restart: 'no'
    environment:
      SQL_PASSWORD: ${SQL_PASSWORD}
      SQL_USER: ${SQL_USER}
      SQL_DB: ${SQL_DB}
      SQL_HOST: postgres
      SQL_PORT: ${SQL_PORT}
      JUPYTER_TOKEN: ${JUPYTER_TOKEN}
    ports:
      - "8889:8888"
    volumes:
      - myapp:/srv/KaggleChallenge/extra_data

  neo4j:
    image: neo4j:5.6.0
    restart: unless-stopped
    ports:
      - 7474:7474
      - 7687:7687
    #volumes:
    #  - ./neo4j/conf:/conf
    #  - ./neo4j/data:/data
    #  - ./neo4j/import:/import
    #  - ./neo4j/logs:/logs
    #  - ./neo4j/plugins:/plugins
    environment: 
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms.memory.heap.initial_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G

  mlflow:
    image: ghcr.io/mlflow/mlflow:2.3.2
    restart: always
    command: mlflow server --host 0.0.0.0
    ports:
      - "5000:5000"

  postgres:
    container_name: postgres
    build:
      context: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_DB: ${SQL_DB}
  
  cloudbeaver:
    image: dbeaver/cloudbeaver:23.0.4
    restart: always

  minio:
    image: minio/minio:RELEASE.2023-05-18T00-05-36Z
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server --console-address ":9001" /data

  zookeeper:
    container_name: zookeper-data
    image: quay.io/debezium/zookeeper:2.3

  kafka:
    container_name: kafka-data
    image: quay.io/debezium/kafka:2.3
    ports:
     - 9092:9092
     - 29092:29092
    links:
     - zookeeper
    environment:
     - ZOOKEEPER_CONNECT=zookeeper:2181
     - KAFKA_BROKER_ID=1
     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
     - KAFKA_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
     - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
     - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092

  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6380:6380'
    command: redis-server --save 20 1 --loglevel warning

  ubuntu:
    container_name: ubuntu
    build:
      context: ubuntu
    ports:
     - 8501:8501
    environment:
     - POSTGRES_USER=${SQL_USER}
     - POSTGRES_PASSWORD=${SQL_PASSWORD}
     - POSTGRES_DB=${SQL_DB}

  connect:
    container_name: debezium-data
    build:
      context: debezium
      args:
        DEBEZIUM_VERSION: 2.3
    ports:
     - 8083:8083
     - 5005:5005
    links:
     - kafka:kafka
     - postgres:postgres
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my-connect-configs
     - OFFSET_STORAGE_TOPIC=my-connect-offsets
     - CONNECT_JDBC_URL=jdbc:postgresql://postgres:5432/database

volumes:
  minio_storage: {}
  myapp:
